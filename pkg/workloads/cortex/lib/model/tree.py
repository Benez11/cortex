# Copyright 2020 Cortex Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import List, Any, Callable
from cortex.lib.concurrency import LockedFile, ReadWriteLock, ReadLock, WriteLock

import os
import time
import threading as td


class ModelsHolder:
    """
    A class to hold models in memory.

    For a model to be removed from memory, it must not hold any references to the model outside this class.
    """

    def __init__(self):
        self._models = {}
        self._locks = {}

    def has_model(self, model: str, version: str) -> bool:
        return self.get_model(model, version) is not None

    def get_model(self, name: str, version: str) -> Any:
        model_id = f"{name}-{version}"
        try:
            self._locks[model_id].acquire()
        except:
            return None
        model = self._models[model_id]
        self._locks[model_id].release()

        return model

    def load_model(self, model: Any, name: str, version: str) -> None:
        model_id = f"{name}-{version}"
        try:
            self._locks[model_id].acquire()
        except:
            lock = td.Lock()
            lock_id = id(lock)
            self._locks[model_id] = lock
            self._locks[model_id].acquire()
            if id(self._locks[model_id]) is not lock_id:
                self._locks[model_id].release()
                raise RuntimeException("caught lock generated by another thread; retry")

        self._models[model_id] = model
        self._locks[model_id].release()

    def remove_model(self, name: str, version: str) -> None:
        model_id = f"{name}-{version}"
        try:
            self._locks[model_id].acquire()
        except:
            return
        del self._models[model_id]
        self._locks[model_id].release()

    def get_model_names(self) -> List[str]:
        model_names = [model_name.split("-") for model_name in self._models.keys()]
        return list(set(model_names))

    def get_model_versions(self, model_name) -> List[str]:
        return [model.split("-")[1] for model in models if model.startswith(model_name)]


class ModelsStates:
    pass


class ModelsLRU:
    def __init__(
        self, mem_cache_size: int, disk_cache_size: int, disk_remover: Callable[[str, str], None],
    ):
        if mem_cache_size > disk_cache_size:
            raise RuntimeException(
                f"mem_cache_size ({mem_cache_size}) must be equal or smaller than disk_cache_size ({disk_cache_size})"
            )

        self._mem_cache_size = mem_cache_size
        self._disk_cache_size = disk_cache_size
        self._disk_remover = disk_remover

        self._models = {}
        self._timestamps = {}
        self._locks = {}

    def acquire(self, mode: str, model_name: str, model_version: str) -> None:
        model_id = f"{model_name}-{model_version}"

        if not model_id in self._locks:
            lock = ReadWriteLock
            lock_id = id(lock)
            self._locks[model_id] = lock
            self._locks[model_id].acquire(mode)
            if id(self._locks[model_id]) is not lock_id:
                self._locks[model_id].release(mode)
                raise RuntimeException("caught lock generated by another thread; retry")
        else:
            self._locks[model_id].acquire(mode)

    def release(self, mode: str, model_name: str, model_version: str) -> None:
        model_id = f"{model_name}-{model_version}"
        self._locks[model_id].release(mode)

    def get_model(self, model_name: str, model_version: str) -> Any:
        model_id = f"{model_name}-{model_version}"
        self._timestamps[model_id] = time.time()
        return self._models[model_id]

    def load_model(self, model: Any, model_name: str, model_version: str) -> None:
        model_id = f"{model_name}-{model_version}"
        self._timestamps[model_id] = time.time()
        self._models[model_id] = model

    def remove_model(self, model_name: str, model_name: str) -> None:
        model_id = f"{model_name}-{model_version}"
        del self._models[model_id]


class LockedStateAndLRU:
    def __init__(
        self,
        mode: str,
        states: ModelsStates,
        models: ModelsLRU,
        model_name: str,
        model_version: str,
    ):
        self._mode = mode
        self._states = states
        self._models = models
        self.model_name = model_name
        self.model_version = model_version

    def __enter__(self):
        self._states.acquire(self._mode, self.model_name, self.model_version)
        self._models.acquire(self._mode, self.model_name, self.model_version)
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self._states.release(self._mode, self.model_name, self.model_version)
        self._models.release(self._mode, self.model_name, self.model_version)
