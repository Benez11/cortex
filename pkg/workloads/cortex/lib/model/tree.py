# Copyright 2020 Cortex Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import List, Any, Callable, AbstractSet
from cortex.lib.concurrency import LockedFile, ReadWriteLock, ReadLock, WriteLock

import os
import time
import threading as td


class ModelsHolder:
    """
    A class to hold models in memory.

    For a model to be removed from memory, it must not hold any references to the model outside this class.
    """

    def __init__(self):
        self._models = {}
        self._locks = {}

    def has_model(self, model: str, version: str) -> bool:
        return self.get_model(model, version) is not None

    def get_model(self, name: str, version: str) -> Any:
        model_id = f"{name}-{version}"
        try:
            self._locks[model_id].acquire()
        except:
            return None
        model = self._models[model_id]
        self._locks[model_id].release()

        return model

    def load_model(self, model: Any, name: str, version: str) -> None:
        model_id = f"{name}-{version}"
        try:
            self._locks[model_id].acquire()
        except:
            lock = td.Lock()
            lock_id = id(lock)
            self._locks[model_id] = lock
            self._locks[model_id].acquire()
            if id(self._locks[model_id]) is not lock_id:
                self._locks[model_id].release()
                raise RuntimeException("caught lock generated by another thread; retry")

        self._models[model_id] = model
        self._locks[model_id].release()

    def remove_model(self, name: str, version: str) -> None:
        model_id = f"{name}-{version}"
        try:
            self._locks[model_id].acquire()
        except:
            return
        del self._models[model_id]
        self._locks[model_id].release()

    def get_model_names(self) -> List[str]:
        model_names = [model_name.split("-") for model_name in self._models.keys()]
        return list(set(model_names))

    def get_model_versions(self, model_name) -> List[str]:
        return [model.split("-")[1] for model in models if model.startswith(model_name)]


class ModelsTree:
    def __init__(self):
        self._models = {}

    def update_models(
        self,
        model_names: List[str],
        model_versions: List[List[str]],
        model_paths: List[str],
        timestamps: List[List[int]],
    ) -> AbstractSet[str], AbstractSet[str]:
        """
        Updates the model tree with the latest from the upstream.

        Args:
            model_names: The unique names of the models as discovered in models:dir or specified in models:paths.
            model_versions: The detected versions of each model. "none" if no version is found.
            model_paths: S3 model paths to each model.
            timestamps: When was each versioned model updated the last time on the upstream.
        
        Returns:
            The model IDs ("<model-name>-<model-version") that haven't been found in the passed parameters.
            Which model IDs have been updated. If these model IDs are in memory or on disk already, then they should get updated as well.
        """

        current_model_ids = set()
        updated_model_ids = set()
        for idx in range(len(model_names)):
            model_name = model_names[idx]
            if len(model_versions[idx]) == 0:
                model_id = f"{model_name}-none"
                updated = self.update_model(
                    model_name, "none", model_paths[idx], timestamps[idx][0]
                )
                current_model_ids.add(model_id)
                if updated:
                    updated_model_ids.add(model_id)
            for model_version in model_versions[idx]:
                model_id = f"{model_name}-{model_version}"
                updated = self.update_model(
                    model_name,
                    model_version,
                    os.path.join(model_paths[idx], model_version),
                    timestamps[idx][model_version],
                )
                current_model_ids.add(model_id)
                if updated:
                    updated_model_ids.add(model_id)

        old_model_ids = set(self._models.keys()) - current_model_ids
        for old_model_id in old_model_ids:
            del self._models[old_model_id]

        return old_model_ids, updated_model_ids

    def update_model(
        self, model_name: str, model_version: str, model_path: str, timestamp: int,
    ) -> None:
        """
        Updates the model tree with the given model.

        Args:
            model_name: The unique name of the model as discovered in models:dir or specified in models:paths.
            model_version: A detected version of the model. "none" if no version is found.
            model_paths: S3 model path to the versioned model.
            timestamp: When was the model path updated the last time.

        Returns:
            True if the model has been updated. False otherwise.
        """

        model_id = f"{model_name}-{model_version}"
        changed = False
        if model_id not in self._models:
            changed = True
        elif self._models[model_id]["timestamp"] < timestamp:
            changed = True

        if changed or model_id in self._models:
            self._models[model_id] = {
                "path": model_path,
                "timestamp": timestamp,
            }

        return changed


class ModelsLRU:
    def __init__(
        self, mem_cache_size: int, disk_cache_size: int, disk_remover: Callable[[str, str], None],
    ):
        if mem_cache_size > disk_cache_size:
            raise RuntimeException(
                f"mem_cache_size ({mem_cache_size}) must be equal or smaller than disk_cache_size ({disk_cache_size})"
            )

        self._mem_cache_size = mem_cache_size
        self._disk_cache_size = disk_cache_size
        self._disk_remover = disk_remover

        self._models = {}
        self._timestamps = {}
        self._locks = {}

    def acquire(self, mode: str, model_name: str, model_version: str) -> None:
        model_id = f"{model_name}-{model_version}"

        if not model_id in self._locks:
            lock = ReadWriteLock()
            lock_id = id(lock)
            self._locks[model_id] = lock
            self._locks[model_id].acquire(mode)
            if id(self._locks[model_id]) is not lock_id:
                self._locks[model_id].release(mode)
                raise RuntimeException("caught lock generated by another thread; retry")
        else:
            self._locks[model_id].acquire(mode)

    def release(self, mode: str, model_name: str, model_version: str) -> None:
        model_id = f"{model_name}-{model_version}"
        self._locks[model_id].release(mode)

    def get_model(self, model_name: str, model_version: str) -> Any:
        model_id = f"{model_name}-{model_version}"
        self._timestamps[model_id] = time.time()
        return self._models[model_id]

    def load_model(self, model: Any, model_name: str, model_version: str) -> None:
        model_id = f"{model_name}-{model_version}"
        self._models[model_id] = model

    def remove_model(self, model_name: str, model_version: str) -> None:
        model_id = f"{model_name}-{model_version}"
        del self._models[model_id]

